// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  pet: (where?: PetWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pets: (args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pet>;
  petsConnection: (args?: {
    where?: PetWhereInput;
    orderBy?: PetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PetConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPet: (data: PetCreateInput) => PetPromise;
  updateManyPets: (args: {
    data: PetUpdateManyMutationInput;
    where?: PetWhereInput;
  }) => BatchPayloadPromise;
  deleteManyPets: (where?: PetWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pet: (
    where?: PetSubscriptionWhereInput
  ) => PetSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PetOrderByInput =
  | "birth_ASC"
  | "birth_DESC"
  | "death_ASC"
  | "death_DESC"
  | "name_ASC"
  | "name_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "species_ASC"
  | "species_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PetCreateInput {
  birth?: Maybe<DateTimeInput>;
  death?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  owner?: Maybe<String>;
  sex?: Maybe<String>;
  species?: Maybe<String>;
}

export interface PetUpdateManyMutationInput {
  birth?: Maybe<DateTimeInput>;
  death?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  owner?: Maybe<String>;
  sex?: Maybe<String>;
  species?: Maybe<String>;
}

export interface PetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PetWhereInput>;
  AND?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
  OR?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
  NOT?: Maybe<PetSubscriptionWhereInput[] | PetSubscriptionWhereInput>;
}

export interface PetWhereInput {
  birth?: Maybe<DateTimeInput>;
  birth_not?: Maybe<DateTimeInput>;
  birth_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birth_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birth_lt?: Maybe<DateTimeInput>;
  birth_lte?: Maybe<DateTimeInput>;
  birth_gt?: Maybe<DateTimeInput>;
  birth_gte?: Maybe<DateTimeInput>;
  death?: Maybe<DateTimeInput>;
  death_not?: Maybe<DateTimeInput>;
  death_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  death_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  death_lt?: Maybe<DateTimeInput>;
  death_lte?: Maybe<DateTimeInput>;
  death_gt?: Maybe<DateTimeInput>;
  death_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  species?: Maybe<String>;
  species_not?: Maybe<String>;
  species_in?: Maybe<String[] | String>;
  species_not_in?: Maybe<String[] | String>;
  species_lt?: Maybe<String>;
  species_lte?: Maybe<String>;
  species_gt?: Maybe<String>;
  species_gte?: Maybe<String>;
  species_contains?: Maybe<String>;
  species_not_contains?: Maybe<String>;
  species_starts_with?: Maybe<String>;
  species_not_starts_with?: Maybe<String>;
  species_ends_with?: Maybe<String>;
  species_not_ends_with?: Maybe<String>;
  AND?: Maybe<PetWhereInput[] | PetWhereInput>;
  OR?: Maybe<PetWhereInput[] | PetWhereInput>;
  NOT?: Maybe<PetWhereInput[] | PetWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AggregatePet {
  count: Int;
}

export interface AggregatePetPromise
  extends Promise<AggregatePet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePetSubscription
  extends Promise<AsyncIterator<AggregatePet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Pet {
  birth?: DateTimeOutput;
  death?: DateTimeOutput;
  name?: String;
  owner?: String;
  sex?: String;
  species?: String;
}

export interface PetPromise extends Promise<Pet>, Fragmentable {
  birth: () => Promise<DateTimeOutput>;
  death: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  owner: () => Promise<String>;
  sex: () => Promise<String>;
  species: () => Promise<String>;
}

export interface PetSubscription
  extends Promise<AsyncIterator<Pet>>,
    Fragmentable {
  birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  death: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  species: () => Promise<AsyncIterator<String>>;
}

export interface PetNullablePromise extends Promise<Pet | null>, Fragmentable {
  birth: () => Promise<DateTimeOutput>;
  death: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  owner: () => Promise<String>;
  sex: () => Promise<String>;
  species: () => Promise<String>;
}

export interface PetPreviousValues {
  birth?: DateTimeOutput;
  death?: DateTimeOutput;
  name?: String;
  owner?: String;
  sex?: String;
  species?: String;
}

export interface PetPreviousValuesPromise
  extends Promise<PetPreviousValues>,
    Fragmentable {
  birth: () => Promise<DateTimeOutput>;
  death: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  owner: () => Promise<String>;
  sex: () => Promise<String>;
  species: () => Promise<String>;
}

export interface PetPreviousValuesSubscription
  extends Promise<AsyncIterator<PetPreviousValues>>,
    Fragmentable {
  birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  death: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  species: () => Promise<AsyncIterator<String>>;
}

export interface PetSubscriptionPayload {
  mutation: MutationType;
  node: Pet;
  updatedFields: String[];
  previousValues: PetPreviousValues;
}

export interface PetSubscriptionPayloadPromise
  extends Promise<PetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PetPreviousValuesPromise>() => T;
}

export interface PetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PetPreviousValuesSubscription>() => T;
}

export interface PetEdge {
  node: Pet;
  cursor: String;
}

export interface PetEdgePromise extends Promise<PetEdge>, Fragmentable {
  node: <T = PetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PetEdgeSubscription
  extends Promise<AsyncIterator<PetEdge>>,
    Fragmentable {
  node: <T = PetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PetConnection {
  pageInfo: PageInfo;
  edges: PetEdge[];
}

export interface PetConnectionPromise
  extends Promise<PetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PetEdge>>() => T;
  aggregate: <T = AggregatePetPromise>() => T;
}

export interface PetConnectionSubscription
  extends Promise<AsyncIterator<PetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PetEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePetSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Pet",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
